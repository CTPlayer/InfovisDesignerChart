<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jiudaotech.www">

    <update id="initSystemCoreTables" databaseId="oracle">
--       CREATE TABLE IF NOT EXISTS T_SYS_CORE_METADATA (
--         ID BIGINT AUTO_INCREMENT,
--         VERSION REAL,
--         UPDATE_TIME VARCHAR(14)
--       );
--       INSERT INTO T_SYS_CORE_METADATA(VERSION, UPDATE_TIME) VALUES (1.0, TO_CHAR(CURRENT_TIMESTAMP(), 'yyyyMMddHHmmss'));

      CREATE TABLE T_SYS_CORE_METADATA (
      ID NUMBER(20,0) PRIMARY KEY,
      VERSION REAL,
      UPDATE_TIME VARCHAR(19)
      );
      CREATE SEQUENCE T_SYS_CORE_METADATA_SEQUENCE minvalue 1 maxvalue 999999999999999999 start with 1 increment by 1 cache 20;
      CREATE OR REPLACE TRIGGER T_SYS_CORE_METADATA_TG BEFORE INSERT ON T_SYS_CORE_METADATA FOR EACH ROW WHEN (NEW.ID IS NULL)
      BEGIN SELECT T_SYS_CORE_METADATA_SEQUENCE.NEXTVAL INTO :NEW.ID FROM DUAL;END;

      INSERT INTO T_SYS_CORE_METADATA(VERSION, UPDATE_TIME) VALUES (1.0, to_char(sysdate,'YYYY-MM-DD HH24:MI:SS'));
      <!--数据库连接表-->
--       CREATE TABLE IF NOT EXISTS T_DB_CONNECTION
--       (
--         ID BIGINT AUTO_INCREMENT NOT NULL,
--         DBTYPE VARCHAR(10) NOT NULL,
--         DBNAME VARCHAR(300) NOT NULL,
--         DBHOST VARCHAR(300) NOT NULL,
--         DBPORT VARCHAR(300) NOT NULL,
--         DBURL VARCHAR(300) NOT NULL,
--         USERNAME VARCHAR(300) NOT NULL,
--         PASSWORD VARCHAR(300) NOT NULL,
--         CREATETIME VARCHAR(14) NOT NULL
--       );
--       COMMENT ON COLUMN T_DB_CONNECTION.ID IS '自增主键';
--       COMMENT ON COLUMN T_DB_CONNECTION.DBTYPE IS '数据库类型';
--       COMMENT ON COLUMN T_DB_CONNECTION.DBNAME IS '数据库名称';
--       COMMENT ON COLUMN T_DB_CONNECTION.DBHOST IS '数据库主机名';
--       COMMENT ON COLUMN T_DB_CONNECTION.DBPORT IS '数据库端口';
--       COMMENT ON COLUMN T_DB_CONNECTION.DBURL IS '数据库连接字符串';
--       COMMENT ON COLUMN T_DB_CONNECTION.USERNAME IS '用户名';
--       COMMENT ON COLUMN T_DB_CONNECTION.PASSWORD IS '密码';
--       COMMENT ON COLUMN T_DB_CONNECTION.CREATETIME IS '创建时间';

      CREATE TABLE T_DB_CONNECTION
      (
        ID NUMBER(20,0) PRIMARY KEY,
        DBTYPE VARCHAR(10) NOT NULL,
        DBNAME VARCHAR(300) NOT NULL,
        DBHOST VARCHAR(300) NOT NULL,
        DBPORT VARCHAR(300) NOT NULL,
        DBURL VARCHAR(300) NOT NULL,
        USERNAME VARCHAR(300) NOT NULL,
        PASSWORD VARCHAR(300) NOT NULL,
        CREATETIME VARCHAR(19) NOT NULL
      );
      CREATE SEQUENCE T_DB_CONNECTION_SEQUENCE minvalue 1 maxvalue 999999999999999999 start with 1 increment by 1 cache 20;
      CREATE OR REPLACE TRIGGER T_DB_CONNECTION_TG BEFORE INSERT ON T_DB_CONNECTION FOR EACH ROW WHEN (NEW.ID IS NULL)
      BEGIN SELECT T_SYS_CORE_METADATA_SEQUENCE.NEXTVAL INTO :NEW.ID FROM DUAL;END;

      <!--sql记录保存表-->
--       CREATE TABLE IF NOT EXISTS T_DB_SQLRECORDING(
--         id BIGINT AUTO_INCREMENT NOT NULL COMMENT '主键',
--         RECORDING_NAME VARCHAR(50) NOT NULL COMMENT '记录名称',
--         SQL_RECORDING CLOB NOT NULL COMMENT 'sql内容',
--         CONNECTION_ID BIGINT NOT NULL COMMENT '连接ID',
--         CREATE_TIME VARCHAR(14) NOT NULL COMMENT '创建日期',
--         CREATE_PEOPLE VARCHAR(50) COMMENT '创建人'
--       );
      CREATE TABLE T_DB_SQLRECORDING(
        ID NUMBER(20,0) PRIMARY KEY,
        RECORDING_NAME VARCHAR(50) NOT NULL,
        SQL_RECORDING CLOB NOT NULL,
        CONNECTION_ID BIGINT NOT NULL,
        CREATE_TIME VARCHAR(14) NOT NULL,
        CREATE_PEOPLE VARCHAR(50)
      );

      CREATE SEQUENCE T_DB_SQLRECORDING_SEQUENCE minvalue 1 maxvalue 999999999999999999 start with 1 increment by 1 cache 20;
      CREATE OR REPLACE TRIGGER T_DB_SQLRECORDING_TG BEFORE INSERT ON T_DB_SQLRECORDING FOR EACH ROW WHEN (NEW.ID IS NULL)
      BEGIN SELECT T_DB_SQLRECORDING_SEQUENCE.NEXTVAL INTO :NEW.ID FROM DUAL;END;

      <!--设计面板保存表-->
--       CREATE TABLE IF NOT EXISTS T_MY_PANEL(
--         id BIGINT AUTO_INCREMENT NOT NULL COMMENT '主键',
--         PANEL_NAME VARCHAR(50) NOT NULL COMMENT '面板名称',
--         PANEL_REMARK VARCHAR(2000) DEFAULT NULL COMMENT '面板备注',
--         CREATE_TIME VARCHAR(14) NOT NULL COMMENT '创建日期',
--         UPDATE_TIME VARCHAR(14) DEFAULT NULL COMMENT '更新日期',
--         HTML_CODE CLOB DEFAULT NULL COMMENT 'html代码',
--         JS_CODE CLOB DEFAULT NULL COMMENT 'JS代码',
--         IMG CLOB DEFAULT NULL COMMENT '图片',
--         EXPORT_ID VARCHAR(36) DEFAULT NULL COMMENT '外部标识UUID',
--         BACKGROUND_CLASS VARCHAR(50) DEFAULT NULL COMMENT '背景class'
--       );
      CREATE TABLE T_MY_PANEL(
        ID NUMBER(20,0) PRIMARY KEY,
        PANEL_NAME VARCHAR(50) NOT NULL,
        PANEL_REMARK VARCHAR(2000) DEFAULT NULL,
        CREATE_TIME VARCHAR(14) NOT NULL,
        UPDATE_TIME VARCHAR(14) DEFAULT NULL,
        HTML_CODE CLOB DEFAULT NULL,
        JS_CODE CLOB DEFAULT NULL,
        IMG CLOB DEFAULT NULL,
        EXPORT_ID VARCHAR(36) DEFAULT NULL,
        BACKGROUND_CLASS VARCHAR(50) DEFAULT NULL,
        C_USER_ID VARCHAR(32) DEFAULT NOT NULL
      );
      CREATE SEQUENCE T_MY_PANEL_SEQUENCE minvalue 1 maxvalue 999999999999999999 start with 1 increment by 1 cache 20;
      CREATE OR REPLACE TRIGGER T_MY_PANEL_TG BEFORE INSERT ON T_MY_PANEL FOR EACH ROW WHEN (NEW.ID IS NULL)
      BEGIN SELECT T_MY_PANEL_SEQUENCE.NEXTVAL INTO :NEW.ID FROM DUAL;END;

      <!--我的图表保存表-->
--       CREATE TABLE IF NOT EXISTS T_MY_CHARTS(
--         id BIGINT AUTO_INCREMENT NOT NULL COMMENT '主键',
--         SQLRECORDING_ID BIGINT NOT NULL COMMENT '连接ID',
--         BUILD_MODEL CLOB NOT NULL COMMENT '数据模型',
--         CHART_TYPE VARCHAR(50) NOT NULL COMMENT '图表类型',
--         JS_CODE CLOB NOT NULL COMMENT '图表配置',
--         CHART_NAME VARCHAR(50) NOT NULL COMMENT '图表名称',
--         IS_REAL_TIME VARCHAR(10) DEFAULT NULL COMMENT '是否实时获取图表配置'
--       );
      CREATE TABLE T_MY_CHARTS(
        ID VARCHAR(20) PRIMARY KEY,
        SQLRECORDING_ID NUMBER(20,0) NOT NULL,
        BUILD_MODEL CLOB NOT NULL,
        CHART_TYPE VARCHAR(50) NOT NULL,
        JS_CODE CLOB NOT NULL,
        CHART_NAME VARCHAR(50) NOT NULL,
        IS_REAL_TIME VARCHAR(10) DEFAULT NULL
      );
      CREATE SEQUENCE T_MY_CHARTS_SEQUENCE minvalue 1 maxvalue 999999999999999999 start with 1 increment by 1 cache 20;
      CREATE OR REPLACE TRIGGER T_MY_CHARTS_TG BEFORE INSERT ON T_MY_CHARTS FOR EACH ROW WHEN (NEW.ID IS NULL)
      BEGIN SELECT T_MY_CHARTS_SEQUENCE.NEXTVAL INTO :NEW.ID FROM DUAL;END;

      <!--设计面板，图表中间表-->
--       CREATE TABLE IF NOT EXISTS T_PANEL_CHARTS(
--         ID BIGINT AUTO_INCREMENT NOT NULL COMMENT ' 主键',
--         EXPORT_ID VARCHAR(36) NOT NULL COMMENT '设计面板唯一标识',
--         CHART_ID BIGINT NOT NULL COMMENT '图表标识',
--         ORDER_ID BIGINT NOT NULL COMMENT '相同设计面板中的容器标识'
--       );
      CREATE TABLE T_PANEL_CHARTS(
        ID NUMBER(20,0) PRIMARY KEY,
        EXPORT_ID VARCHAR(36) NOT NULL,
        CHART_ID NUMBER(20,0) NOT NULL,
        ORDER_ID NUMBER(20,0) NOT NULL
      );
      CREATE SEQUENCE T_PANEL_CHARTS_SEQUENCE minvalue 1 maxvalue 999999999999999999 start with 1 increment by 1 cache 20;
      CREATE OR REPLACE TRIGGER T_PANEL_CHARTS_TG BEFORE INSERT ON T_PANEL_CHARTS FOR EACH ROW WHEN (NEW.ID IS NULL)
      BEGIN SELECT T_PANEL_CHARTS_SEQUENCE.NEXTVAL INTO :NEW.ID FROM DUAL;END;

      create table R_GROUP
      (
      group_id   VARCHAR2(32) default sys_guid(),
      group_name VARCHAR2(64) not null,
      descride   VARCHAR2(255)
      );
      comment on column R_GROUP.group_id
      is '32位唯一随机数';

      create table R_GROUP_RELATION
      (
      group_id  VARCHAR2(32),
      c_user_id VARCHAR2(32)
      )
      ;

      create table R_PRIVS
      (
      reporter_id       VARCHAR2(32),
      privs_resource_id VARCHAR2(34),
      read              NUMBER(1),
      write             NUMBER(1)
      )
      ;
      comment on column R_PRIVS.reporter_id
      is '与R_REPORTER关联';
      comment on column R_PRIVS.privs_resource_id
      is '与R_RESOURCE关联';
      comment on column R_PRIVS.read
      is '0或空表示没权限,1表示有权限';
      comment on column R_PRIVS.write
      is '0或空表示没权限,1表示有权限';

      create table R_REPORTER
      (
      reporter_id   VARCHAR2(32) default sys_guid(),
      reporter_name VARCHAR2(64) not null,
      descride      VARCHAR2(255)
      )
      ;
      comment on column R_REPORTER.reporter_id
      is '32位唯一随机数';
      comment on column R_REPORTER.reporter_name
      is '报表名称';
      comment on column R_REPORTER.descride
      is '描述';
      alter table R_REPORTER
      add constraint PK_R_REPORTER primary key (REPORTER_NAME);

      create table R_USER
      (
      user_id   VARCHAR2(32) default sys_guid(),
      user_name VARCHAR2(64) not null,
      descride  VARCHAR2(64),
      user_type NUMBER(2),
      password  VARCHAR2(16)
      )
      ;
      comment on column R_USER.user_id
      is '32位唯一随机数';
      comment on column R_USER.user_name
      is '用户名称';
      comment on column R_USER.descride
      is '描述';
      comment on column R_USER.user_type
      is '用户类型（超级管理员和普通用户区别）';
      comment on column R_USER.password
      is '密码';
      alter table R_USER
      add constraint PK_R_USER primary key (USER_NAME);

      create or replace force view r_resource as
      select
      'US' ||USER_ID as RESOURCE_ID,
      USER_ID as ID,
      '1' as TYPE,
      USER_NAME as NAME
      from
      R_USER
      union
      select
      'GR' ||GROUP_ID as RESOURCE_ID,
      GROUP_ID as ID,
      '2' as TYPE,
      GROUP_NAME as NAME
      from
      R_GROUP
      with read only;
    </update>

    <update id="initQuartzTables" databaseId="oracle">
--       CREATE TABLE QRTZ_CALENDARS (
--         SCHED_NAME VARCHAR(120) NOT NULL,
--         CALENDAR_NAME VARCHAR (200)  NOT NULL ,
--         CALENDAR IMAGE NOT NULL
--       );
--
--       CREATE TABLE QRTZ_CRON_TRIGGERS (
--         SCHED_NAME VARCHAR(120) NOT NULL,
--         TRIGGER_NAME VARCHAR (200)  NOT NULL ,
--         TRIGGER_GROUP VARCHAR (200)  NOT NULL ,
--         CRON_EXPRESSION VARCHAR (120)  NOT NULL ,
--         TIME_ZONE_ID VARCHAR (80)
--       );
--
--       CREATE TABLE QRTZ_FIRED_TRIGGERS (
--         SCHED_NAME VARCHAR(120) NOT NULL,
--         ENTRY_ID VARCHAR (95)  NOT NULL ,
--         TRIGGER_NAME VARCHAR (200)  NOT NULL ,
--         TRIGGER_GROUP VARCHAR (200)  NOT NULL ,
--         INSTANCE_NAME VARCHAR (200)  NOT NULL ,
--         FIRED_TIME BIGINT NOT NULL ,
--         SCHED_TIME BIGINT NOT NULL ,
--         PRIORITY INTEGER NOT NULL ,
--         STATE VARCHAR (16)  NOT NULL,
--         JOB_NAME VARCHAR (200)  NULL ,
--         JOB_GROUP VARCHAR (200)  NULL ,
--         IS_NONCONCURRENT BOOLEAN  NULL ,
--         REQUESTS_RECOVERY BOOLEAN  NULL
--       );
--
--       CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (
--         SCHED_NAME VARCHAR(120) NOT NULL,
--         TRIGGER_GROUP VARCHAR (200)  NOT NULL
--       );
--
--       CREATE TABLE QRTZ_SCHEDULER_STATE (
--         SCHED_NAME VARCHAR(120) NOT NULL,
--         INSTANCE_NAME VARCHAR (200)  NOT NULL ,
--         LAST_CHECKIN_TIME BIGINT NOT NULL ,
--         CHECKIN_INTERVAL BIGINT NOT NULL
--       );
--
--       CREATE TABLE QRTZ_LOCKS (
--         SCHED_NAME VARCHAR(120) NOT NULL,
--         LOCK_NAME VARCHAR (40)  NOT NULL
--       );
--
--       CREATE TABLE QRTZ_JOB_DETAILS (
--         SCHED_NAME VARCHAR(120) NOT NULL,
--         JOB_NAME VARCHAR (200)  NOT NULL ,
--         JOB_GROUP VARCHAR (200)  NOT NULL ,
--         DESCRIPTION VARCHAR (250) NULL ,
--         JOB_CLASS_NAME VARCHAR (250)  NOT NULL ,
--         IS_DURABLE BOOLEAN  NOT NULL ,
--         IS_NONCONCURRENT BOOLEAN  NOT NULL ,
--         IS_UPDATE_DATA BOOLEAN  NOT NULL ,
--         REQUESTS_RECOVERY BOOLEAN  NOT NULL ,
--         JOB_DATA IMAGE NULL
--       );
--
--       CREATE TABLE QRTZ_SIMPLE_TRIGGERS (
--         SCHED_NAME VARCHAR(120) NOT NULL,
--         TRIGGER_NAME VARCHAR (200)  NOT NULL ,
--         TRIGGER_GROUP VARCHAR (200)  NOT NULL ,
--         REPEAT_COUNT BIGINT NOT NULL ,
--         REPEAT_INTERVAL BIGINT NOT NULL ,
--         TIMES_TRIGGERED BIGINT NOT NULL
--       );
--
--       CREATE TABLE qrtz_simprop_triggers
--       (
--         SCHED_NAME VARCHAR(120) NOT NULL,
--         TRIGGER_NAME VARCHAR(200) NOT NULL,
--         TRIGGER_GROUP VARCHAR(200) NOT NULL,
--         STR_PROP_1 VARCHAR(512) NULL,
--         STR_PROP_2 VARCHAR(512) NULL,
--         STR_PROP_3 VARCHAR(512) NULL,
--         INT_PROP_1 INTEGER NULL,
--         INT_PROP_2 INTEGER NULL,
--         LONG_PROP_1 BIGINT NULL,
--         LONG_PROP_2 BIGINT NULL,
--         DEC_PROP_1 NUMERIC(13,4) NULL,
--         DEC_PROP_2 NUMERIC(13,4) NULL,
--         BOOL_PROP_1 BOOLEAN NULL,
--         BOOL_PROP_2 BOOLEAN NULL,
--       );
--
--       CREATE TABLE QRTZ_BLOB_TRIGGERS (
--         SCHED_NAME VARCHAR(120) NOT NULL,
--         TRIGGER_NAME VARCHAR (200)  NOT NULL ,
--         TRIGGER_GROUP VARCHAR (200)  NOT NULL ,
--         BLOB_DATA IMAGE NULL
--       );
--
--       CREATE TABLE QRTZ_TRIGGERS (
--         SCHED_NAME VARCHAR(120) NOT NULL,
--         TRIGGER_NAME VARCHAR (200)  NOT NULL ,
--         TRIGGER_GROUP VARCHAR (200)  NOT NULL ,
--         JOB_NAME VARCHAR (200)  NOT NULL ,
--         JOB_GROUP VARCHAR (200)  NOT NULL ,
--         DESCRIPTION VARCHAR (250) NULL ,
--         NEXT_FIRE_TIME BIGINT NULL ,
--         PREV_FIRE_TIME BIGINT NULL ,
--         PRIORITY INTEGER NULL ,
--         TRIGGER_STATE VARCHAR (16)  NOT NULL ,
--         TRIGGER_TYPE VARCHAR (8)  NOT NULL ,
--         START_TIME BIGINT NOT NULL ,
--         END_TIME BIGINT NULL ,
--         CALENDAR_NAME VARCHAR (200)  NULL ,
--         MISFIRE_INSTR SMALLINT NULL ,
--         JOB_DATA IMAGE NULL
--       );
--
--       ALTER TABLE QRTZ_CALENDARS  ADD
--       CONSTRAINT PK_QRTZ_CALENDARS PRIMARY KEY
--         (
--           SCHED_NAME,
--           CALENDAR_NAME
--         );
--
--       ALTER TABLE QRTZ_CRON_TRIGGERS  ADD
--       CONSTRAINT PK_QRTZ_CRON_TRIGGERS PRIMARY KEY
--         (
--           SCHED_NAME,
--           TRIGGER_NAME,
--           TRIGGER_GROUP
--         );
--
--       ALTER TABLE QRTZ_FIRED_TRIGGERS  ADD
--       CONSTRAINT PK_QRTZ_FIRED_TRIGGERS PRIMARY KEY
--         (
--           SCHED_NAME,
--           ENTRY_ID
--         );
--
--       ALTER TABLE QRTZ_PAUSED_TRIGGER_GRPS  ADD
--       CONSTRAINT PK_QRTZ_PAUSED_TRIGGER_GRPS PRIMARY KEY
--         (
--           SCHED_NAME,
--           TRIGGER_GROUP
--         );
--
--       ALTER TABLE QRTZ_SCHEDULER_STATE  ADD
--       CONSTRAINT PK_QRTZ_SCHEDULER_STATE PRIMARY KEY
--         (
--           SCHED_NAME,
--           INSTANCE_NAME
--         );
--
--       ALTER TABLE QRTZ_LOCKS  ADD
--       CONSTRAINT PK_QRTZ_LOCKS PRIMARY KEY
--         (
--           SCHED_NAME,
--           LOCK_NAME
--         );
--
--       ALTER TABLE QRTZ_JOB_DETAILS  ADD
--       CONSTRAINT PK_QRTZ_JOB_DETAILS PRIMARY KEY
--         (
--           SCHED_NAME,
--           JOB_NAME,
--           JOB_GROUP
--         );
--
--       ALTER TABLE QRTZ_SIMPLE_TRIGGERS  ADD
--       CONSTRAINT PK_QRTZ_SIMPLE_TRIGGERS PRIMARY KEY
--         (
--           SCHED_NAME,
--           TRIGGER_NAME,
--           TRIGGER_GROUP
--         );
--
--       ALTER TABLE QRTZ_SIMPROP_TRIGGERS  ADD
--       CONSTRAINT PK_QRTZ_SIMPROP_TRIGGERS PRIMARY KEY
--         (
--           SCHED_NAME,
--           TRIGGER_NAME,
--           TRIGGER_GROUP
--         );
--
--       ALTER TABLE QRTZ_TRIGGERS  ADD
--       CONSTRAINT PK_QRTZ_TRIGGERS PRIMARY KEY
--         (
--           SCHED_NAME,
--           TRIGGER_NAME,
--           TRIGGER_GROUP
--         );
--
--       ALTER TABLE QRTZ_CRON_TRIGGERS ADD
--       CONSTRAINT FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS FOREIGN KEY
--         (
--           SCHED_NAME,
--           TRIGGER_NAME,
--           TRIGGER_GROUP
--         ) REFERENCES QRTZ_TRIGGERS (
--         SCHED_NAME,
--         TRIGGER_NAME,
--         TRIGGER_GROUP
--       ) ON DELETE CASCADE;
--
--
--       ALTER TABLE QRTZ_SIMPLE_TRIGGERS ADD
--       CONSTRAINT FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS FOREIGN KEY
--         (
--           SCHED_NAME,
--           TRIGGER_NAME,
--           TRIGGER_GROUP
--         ) REFERENCES QRTZ_TRIGGERS (
--         SCHED_NAME,
--         TRIGGER_NAME,
--         TRIGGER_GROUP
--       ) ON DELETE CASCADE;
--
--       ALTER TABLE QRTZ_SIMPROP_TRIGGERS ADD
--       CONSTRAINT FK_QRTZ_SIMPROP_TRIGGERS_QRTZ_TRIGGERS FOREIGN KEY
--         (
--           SCHED_NAME,
--           TRIGGER_NAME,
--           TRIGGER_GROUP
--         ) REFERENCES QRTZ_TRIGGERS (
--         SCHED_NAME,
--         TRIGGER_NAME,
--         TRIGGER_GROUP
--       ) ON DELETE CASCADE;
--
--
--       ALTER TABLE QRTZ_TRIGGERS ADD
--       CONSTRAINT FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS FOREIGN KEY
--         (
--           SCHED_NAME,
--           JOB_NAME,
--           JOB_GROUP
--         ) REFERENCES QRTZ_JOB_DETAILS (
--         SCHED_NAME,
--         JOB_NAME,
--         JOB_GROUP
--       );
--
--       COMMIT;
    CREATE TABLE qrtz_job_details
      (
        SCHED_NAME VARCHAR2(120) NOT NULL,
        JOB_NAME  VARCHAR2(200) NOT NULL,
        JOB_GROUP VARCHAR2(200) NOT NULL,
        DESCRIPTION VARCHAR2(250) NULL,
        JOB_CLASS_NAME   VARCHAR2(250) NOT NULL,
        IS_DURABLE VARCHAR2(1) NOT NULL,
        IS_NONCONCURRENT VARCHAR2(1) NOT NULL,
        IS_UPDATE_DATA VARCHAR2(1) NOT NULL,
        REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
        JOB_DATA BLOB NULL,
        CONSTRAINT QRTZ_JOB_DETAILS_PK PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
    );
    CREATE TABLE qrtz_triggers
      (
        SCHED_NAME VARCHAR2(120) NOT NULL,
        TRIGGER_NAME VARCHAR2(200) NOT NULL,
        TRIGGER_GROUP VARCHAR2(200) NOT NULL,
        JOB_NAME  VARCHAR2(200) NOT NULL,
        JOB_GROUP VARCHAR2(200) NOT NULL,
        DESCRIPTION VARCHAR2(250) NULL,
        NEXT_FIRE_TIME NUMBER(13) NULL,
        PREV_FIRE_TIME NUMBER(13) NULL,
        PRIORITY NUMBER(13) NULL,
        TRIGGER_STATE VARCHAR2(16) NOT NULL,
        TRIGGER_TYPE VARCHAR2(8) NOT NULL,
        START_TIME NUMBER(13) NOT NULL,
        END_TIME NUMBER(13) NULL,
        CALENDAR_NAME VARCHAR2(200) NULL,
        MISFIRE_INSTR NUMBER(2) NULL,
        JOB_DATA BLOB NULL,
        CONSTRAINT QRTZ_TRIGGERS_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
        CONSTRAINT QRTZ_TRIGGER_TO_JOBS_FK FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
          REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP)
    );
    CREATE TABLE qrtz_simple_triggers
      (
        SCHED_NAME VARCHAR2(120) NOT NULL,
        TRIGGER_NAME VARCHAR2(200) NOT NULL,
        TRIGGER_GROUP VARCHAR2(200) NOT NULL,
        REPEAT_COUNT NUMBER(7) NOT NULL,
        REPEAT_INTERVAL NUMBER(12) NOT NULL,
        TIMES_TRIGGERED NUMBER(10) NOT NULL,
        CONSTRAINT QRTZ_SIMPLE_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
        CONSTRAINT QRTZ_SIMPLE_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
    );
    CREATE TABLE qrtz_cron_triggers
      (
        SCHED_NAME VARCHAR2(120) NOT NULL,
        TRIGGER_NAME VARCHAR2(200) NOT NULL,
        TRIGGER_GROUP VARCHAR2(200) NOT NULL,
        CRON_EXPRESSION VARCHAR2(120) NOT NULL,
        TIME_ZONE_ID VARCHAR2(80),
        CONSTRAINT QRTZ_CRON_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
        CONSTRAINT QRTZ_CRON_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
          REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
    );
    CREATE TABLE qrtz_simprop_triggers
      (
        SCHED_NAME VARCHAR2(120) NOT NULL,
        TRIGGER_NAME VARCHAR2(200) NOT NULL,
        TRIGGER_GROUP VARCHAR2(200) NOT NULL,
        STR_PROP_1 VARCHAR2(512) NULL,
        STR_PROP_2 VARCHAR2(512) NULL,
        STR_PROP_3 VARCHAR2(512) NULL,
        INT_PROP_1 NUMBER(10) NULL,
        INT_PROP_2 NUMBER(10) NULL,
        LONG_PROP_1 NUMBER(13) NULL,
        LONG_PROP_2 NUMBER(13) NULL,
        DEC_PROP_1 NUMERIC(13,4) NULL,
        DEC_PROP_2 NUMERIC(13,4) NULL,
        BOOL_PROP_1 VARCHAR2(1) NULL,
        BOOL_PROP_2 VARCHAR2(1) NULL,
        CONSTRAINT QRTZ_SIMPROP_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
        CONSTRAINT QRTZ_SIMPROP_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
          REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
    );
    CREATE TABLE qrtz_blob_triggers
      (
        SCHED_NAME VARCHAR2(120) NOT NULL,
        TRIGGER_NAME VARCHAR2(200) NOT NULL,
        TRIGGER_GROUP VARCHAR2(200) NOT NULL,
        BLOB_DATA BLOB NULL,
        CONSTRAINT QRTZ_BLOB_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
        CONSTRAINT QRTZ_BLOB_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
    );
    CREATE TABLE qrtz_calendars
      (
        SCHED_NAME VARCHAR2(120) NOT NULL,
        CALENDAR_NAME  VARCHAR2(200) NOT NULL,
        CALENDAR BLOB NOT NULL,
        CONSTRAINT QRTZ_CALENDARS_PK PRIMARY KEY (SCHED_NAME,CALENDAR_NAME)
    );
    CREATE TABLE qrtz_paused_trigger_grps
      (
        SCHED_NAME VARCHAR2(120) NOT NULL,
        TRIGGER_GROUP  VARCHAR2(200) NOT NULL,
        CONSTRAINT QRTZ_PAUSED_TRIG_GRPS_PK PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP)
    );
    CREATE TABLE qrtz_fired_triggers
      (
        SCHED_NAME VARCHAR2(120) NOT NULL,
        ENTRY_ID VARCHAR2(95) NOT NULL,
        TRIGGER_NAME VARCHAR2(200) NOT NULL,
        TRIGGER_GROUP VARCHAR2(200) NOT NULL,
        INSTANCE_NAME VARCHAR2(200) NOT NULL,
        FIRED_TIME NUMBER(13) NOT NULL,
        PRIORITY NUMBER(13) NOT NULL,
        STATE VARCHAR2(16) NOT NULL,
        JOB_NAME VARCHAR2(200) NULL,
        JOB_GROUP VARCHAR2(200) NULL,
        IS_NONCONCURRENT VARCHAR2(1) NULL,
        REQUESTS_RECOVERY VARCHAR2(1) NULL,
        CONSTRAINT QRTZ_FIRED_TRIGGER_PK PRIMARY KEY (SCHED_NAME,ENTRY_ID)
    );
    CREATE TABLE qrtz_scheduler_state
      (
        SCHED_NAME VARCHAR2(120) NOT NULL,
        INSTANCE_NAME VARCHAR2(200) NOT NULL,
        LAST_CHECKIN_TIME NUMBER(13) NOT NULL,
        CHECKIN_INTERVAL NUMBER(13) NOT NULL,
        CONSTRAINT QRTZ_SCHEDULER_STATE_PK PRIMARY KEY (SCHED_NAME,INSTANCE_NAME)
    );
    CREATE TABLE qrtz_locks
      (
        SCHED_NAME VARCHAR2(120) NOT NULL,
        LOCK_NAME  VARCHAR2(40) NOT NULL,
        CONSTRAINT QRTZ_LOCKS_PK PRIMARY KEY (SCHED_NAME,LOCK_NAME)
    );

    create index idx_qrtz_j_req_recovery on qrtz_job_details(SCHED_NAME,REQUESTS_RECOVERY);
    create index idx_qrtz_j_grp on qrtz_job_details(SCHED_NAME,JOB_GROUP);

    create index idx_qrtz_t_j on qrtz_triggers(SCHED_NAME,JOB_NAME,JOB_GROUP);
    create index idx_qrtz_t_jg on qrtz_triggers(SCHED_NAME,JOB_GROUP);
    create index idx_qrtz_t_c on qrtz_triggers(SCHED_NAME,CALENDAR_NAME);
    create index idx_qrtz_t_g on qrtz_triggers(SCHED_NAME,TRIGGER_GROUP);
    create index idx_qrtz_t_state on qrtz_triggers(SCHED_NAME,TRIGGER_STATE);
    create index idx_qrtz_t_n_state on qrtz_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);
    create index idx_qrtz_t_n_g_state on qrtz_triggers(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);
    create index idx_qrtz_t_next_fire_time on qrtz_triggers(SCHED_NAME,NEXT_FIRE_TIME);
    create index idx_qrtz_t_nft_st on qrtz_triggers(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);
    create index idx_qrtz_t_nft_misfire on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);
    create index idx_qrtz_t_nft_st_misfire on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);
    create index idx_qrtz_t_nft_st_misfire_grp on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);

    create index idx_qrtz_ft_trig_inst_name on qrtz_fired_triggers(SCHED_NAME,INSTANCE_NAME);
    create index idx_qrtz_ft_inst_job_req_rcvry on qrtz_fired_triggers(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);
    create index idx_qrtz_ft_j_g on qrtz_fired_triggers(SCHED_NAME,JOB_NAME,JOB_GROUP);
    create index idx_qrtz_ft_jg on qrtz_fired_triggers(SCHED_NAME,JOB_GROUP);
    create index idx_qrtz_ft_t_g on qrtz_fired_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);
    create index idx_qrtz_ft_tg on qrtz_fired_triggers(SCHED_NAME,TRIGGER_GROUP)
    </update>
</mapper>